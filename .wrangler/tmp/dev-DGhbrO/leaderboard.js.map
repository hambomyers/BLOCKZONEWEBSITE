{
  "version": 3,
  "sources": ["../bundle-DjsU6F/checked-fetch.js", "../bundle-DjsU6F/strip-cf-connecting-ip-header.js", "../../../worker/leaderboard.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-DjsU6F/middleware-insertion-facade.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-DjsU6F/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\hambo\\Desktop\\BLOCKZONELABcryptoedutainment\\BlockZoneLabWEBSITE\\.wrangler\\tmp\\dev-DGhbrO",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export default {\r\n  async fetch(request, env) {\r\n    const url = new URL(request.url);\r\n\r\n    // CORS headers\r\n    const headers = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type',\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { headers });\r\n    }\r\n\r\n    // Route requests\r\n    try {\r\n      if (url.pathname === '/api/scores' && request.method === 'POST') {\r\n        return handleSubmitScore(request, env, headers);\r\n      }\r\n\r\n      if (url.pathname === '/api/leaderboard' && request.method === 'GET') {\r\n        return handleGetLeaderboard(request, env, headers);\r\n      }\r\n\r\n      // NEW: Large leaderboard endpoint for 1000+ players\r\n      if (url.pathname === '/api/leaderboard/large' && request.method === 'GET') {\r\n        return handleGetLargeLeaderboard(request, env, headers);\r\n      }\r\n\r\n      if (url.pathname.startsWith('/api/players/') && url.pathname.endsWith('/stats')) {\r\n        return handleGetPlayerStats(request, env, headers);\r\n      }\r\n\r\n      return new Response(JSON.stringify({ error: 'Not found' }), {\r\n        status: 404,\r\n        headers\r\n      });\r\n\r\n    } catch (error) {\r\n      return new Response(JSON.stringify({ error: error.message }), {\r\n        status: 500,\r\n        headers\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// Submit score\r\nasync function handleSubmitScore(request, env, headers) {\r\n  const data = await request.json();\r\n  const { score, replay_hash, metrics, player_id, timestamp } = data;\r\n\r\n  // Validate score\r\n  const validation = validateScore(score, metrics);\r\n  if (!validation.valid) {\r\n    return new Response(JSON.stringify({\r\n      verified: false,\r\n      reason: validation.reason\r\n    }), { status: 400, headers });\r\n  }\r\n\r\n  // Check for duplicate\r\n  const existing = await env.SCORES.get(`replay:${replay_hash}`);\r\n  if (existing) {\r\n    return new Response(JSON.stringify({\r\n      verified: false,\r\n      reason: 'Duplicate submission'\r\n    }), { status: 400, headers });\r\n  }\r\n\r\n  // Generate score ID\r\n  const scoreId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  // Store score data\r\n  const scoreData = {\r\n    id: scoreId,\r\n    player_id,\r\n    score,\r\n    replay_hash,\r\n    metrics,\r\n    timestamp: timestamp || Date.now(),\r\n    verified: true\r\n  };\r\n\r\n  // Save to KV\r\n  await Promise.all([\r\n    env.SCORES.put(`replay:${replay_hash}`, JSON.stringify(scoreData)),\r\n    env.SCORES.put(`score:${scoreId}`, JSON.stringify(scoreData)),\r\n    updatePlayerHighScore(env, player_id, score),\r\n    updateLeaderboard(env, 'daily', player_id, score),\r\n    updateLeaderboard(env, 'weekly', player_id, score),\r\n    updateLeaderboard(env, 'all', player_id, score)\r\n  ]);\r\n\r\n  // Calculate rank\r\n  const rank = await calculateRank(env, score, 'daily');\r\n\r\n  return new Response(JSON.stringify({\r\n    verified: true,\r\n    score_id: scoreId,\r\n    rank: rank,\r\n    is_high_score: await isNewHighScore(env, player_id, score)\r\n  }), { headers });\r\n}\r\n\r\n// Get leaderboard (standard, up to 100 entries)\r\nasync function handleGetLeaderboard(request, env, headers) {\r\n  const url = new URL(request.url);\r\n  const period = url.searchParams.get('period') || 'daily';\r\n  const limit = Math.min(parseInt(url.searchParams.get('limit') || '100'), 100);\r\n  const game = url.searchParams.get('game') || 'neon_drop';\r\n\r\n  const leaderboardKey = `leaderboard:${game}:${period}`;\r\n  const data = await env.SCORES.get(leaderboardKey, 'json') || { scores: [] };\r\n\r\n  const scores = data.scores\r\n    .sort((a, b) => b.score - a.score)\r\n    .slice(0, limit)\r\n    .map((entry, index) => ({\r\n      ...entry,\r\n      rank: index + 1\r\n    }));\r\n\r\n  return new Response(JSON.stringify({\r\n    period,\r\n    game,\r\n    scores,\r\n    total_players: data.scores.length,\r\n    updated_at: new Date().toISOString()\r\n  }), { headers });\r\n}\r\n\r\n// NEW: Get large leaderboard (up to 1000 entries)\r\nasync function handleGetLargeLeaderboard(request, env, headers) {\r\n  const url = new URL(request.url);\r\n  const period = url.searchParams.get('period') || 'daily';\r\n  const limit = Math.min(parseInt(url.searchParams.get('limit') || '1000'), 1000);\r\n  const game = url.searchParams.get('game') || 'neon_drop';\r\n\r\n  const leaderboardKey = `leaderboard:${game}:${period}`;\r\n  const data = await env.SCORES.get(leaderboardKey, 'json') || { scores: [] };\r\n\r\n  const scores = data.scores\r\n    .sort((a, b) => b.score - a.score)\r\n    .slice(0, limit)\r\n    .map((entry, index) => ({\r\n      ...entry,\r\n      rank: index + 1\r\n    }));\r\n\r\n  return new Response(JSON.stringify({\r\n    period,\r\n    game,\r\n    scores,\r\n    total_players: data.scores.length,\r\n    page_size: limit,\r\n    updated_at: new Date().toISOString()\r\n  }), { headers });\r\n}\r\n\r\n// Get player stats\r\nasync function handleGetPlayerStats(request, env, headers) {\r\n  const url = new URL(request.url);\r\n  const playerId = url.pathname.split('/')[3];\r\n\r\n  const playerData = await env.SCORES.get(`player:${playerId}`, 'json') || {\r\n    high_score: 0,\r\n    games_played: 0,\r\n    total_score: 0\r\n  };\r\n\r\n  const rank = await calculateRank(env, playerData.high_score, 'daily');\r\n\r\n  return new Response(JSON.stringify({\r\n    ...playerData,\r\n    avg_score: playerData.games_played > 0\r\n      ? Math.floor(playerData.total_score / playerData.games_played)\r\n      : 0,\r\n    current_rank: rank\r\n  }), { headers });\r\n}\r\n\r\n// Helper functions\r\nfunction validateScore(score, metrics) {\r\n  if (metrics.apm > 300) {\r\n    return { valid: false, reason: 'APM too high' };\r\n  }\r\n\r\n  if (metrics.pps > 3.5) {\r\n    return { valid: false, reason: 'PPS too high' };\r\n  }\r\n\r\n  const maxScorePerSecond = 150;\r\n  const maxPossibleScore = (metrics.gameTime / 1000) * maxScorePerSecond;\r\n\r\n  if (score > maxPossibleScore) {\r\n    return { valid: false, reason: 'Score impossible for duration' };\r\n  }\r\n\r\n  return { valid: true };\r\n}\r\n\r\nasync function updatePlayerHighScore(env, playerId, score) {\r\n  const key = `player:${playerId}`;\r\n  const existing = await env.SCORES.get(key, 'json') || {\r\n    high_score: 0,\r\n    games_played: 0,\r\n    total_score: 0,\r\n    display_name: `Player ${playerId.slice(0, 6)}`\r\n  };\r\n\r\n  existing.games_played++;\r\n  existing.total_score += score;\r\n\r\n  if (score > existing.high_score) {\r\n    existing.high_score = score;\r\n  }\r\n\r\n  await env.SCORES.put(key, JSON.stringify(existing));\r\n}\r\n\r\nasync function updateLeaderboard(env, period, playerId, score, game = 'neon_drop') {\r\n  const key = `leaderboard:${game}:${period}`;\r\n  const leaderboard = await env.SCORES.get(key, 'json') || { scores: [] };\r\n\r\n  // Remove player's previous entry\r\n  leaderboard.scores = leaderboard.scores.filter(s => s.player_id !== playerId);\r\n\r\n  const playerData = await env.SCORES.get(`player:${playerId}`, 'json');\r\n  leaderboard.scores.push({\r\n    player_id: playerId,\r\n    display_name: playerData?.display_name || `Player ${playerId.slice(0, 6)}`,\r\n    score: score,\r\n    timestamp: Date.now()\r\n  });\r\n\r\n  // Sort and keep top 1000\r\n  leaderboard.scores.sort((a, b) => b.score - a.score);\r\n  leaderboard.scores = leaderboard.scores.slice(0, 1000);\r\n\r\n  await env.SCORES.put(key, JSON.stringify(leaderboard));\r\n}\r\n\r\nasync function calculateRank(env, score, period, game = 'neon_drop') {\r\n  const leaderboard = await env.SCORES.get(`leaderboard:${game}:${period}`, 'json') || { scores: [] };\r\n  return leaderboard.scores.filter(s => s.score > score).length + 1;\r\n}\r\n\r\nasync function isNewHighScore(env, playerId, score) {\r\n  const playerData = await env.SCORES.get(`player:${playerId}`, 'json');\r\n  return !playerData || score > (playerData.high_score || 0);\r\n}\r\n\r\n// Weekly leaderboard cleanup (run via cron trigger)\r\nexport async function cleanupWeeklyLeaderboards(env) {\r\n  const oneWeekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);\r\n\r\n  const weeklyData = await env.SCORES.get('leaderboard:neon_drop:weekly', 'json');\r\n  if (weeklyData) {\r\n    weeklyData.scores = weeklyData.scores.filter(score => score.timestamp > oneWeekAgo);\r\n    await env.SCORES.put('leaderboard:neon_drop:weekly', JSON.stringify(weeklyData));\r\n  }\r\n}\r\n\r\n// Daily leaderboard cleanup (run via cron trigger)\r\nexport async function cleanupDailyLeaderboards(env) {\r\n  const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\r\n\r\n  const dailyData = await env.SCORES.get('leaderboard:neon_drop:daily', 'json');\r\n  if (dailyData) {\r\n    dailyData.scores = dailyData.scores.filter(score => score.timestamp > oneDayAgo);\r\n    await env.SCORES.put('leaderboard:neon_drop:daily', JSON.stringify(dailyData));\r\n  }\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\hambo\\\\Desktop\\\\BLOCKZONELABcryptoedutainment\\\\BlockZoneLabWEBSITE\\\\worker\\\\leaderboard.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\hambo\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\hambo\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\hambo\\\\Desktop\\\\BLOCKZONELABcryptoedutainment\\\\BlockZoneLabWEBSITE\\\\worker\\\\leaderboard.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\hambo\\\\Desktop\\\\BLOCKZONELABcryptoedutainment\\\\BlockZoneLabWEBSITE\\\\.wrangler\\\\tmp\\\\bundle-DjsU6F\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\hambo\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\hambo\\\\Desktop\\\\BLOCKZONELABcryptoedutainment\\\\BlockZoneLabWEBSITE\\\\.wrangler\\\\tmp\\\\bundle-DjsU6F\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\hambo\\\\Desktop\\\\BLOCKZONELABcryptoedutainment\\\\BlockZoneLabWEBSITE\\\\.wrangler\\\\tmp\\\\bundle-DjsU6F\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
